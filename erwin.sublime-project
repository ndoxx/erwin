{
	"folders":
	[
		{
			"name": "Editor",
			"path": "source/Applications/Editor/source",
			"file_exclude_patterns": ["*.spv"],
			"binary_file_patterns": ["*.spv"],
			"folder_exclude_patterns": ["fonts"],
		},
		{
			"name": "Engine",
			"path": "source/Erwin",
			"file_exclude_patterns": ["*.spv"],
			"binary_file_patterns": ["*.spv"],
			"folder_exclude_patterns": ["textures"]
		},
		{
			"name": "Platform",
			"path": "source/platform"
		},
		{
			"name": "Tests",
			"path": "source/tests"
		},
		{
			"name": "Dev",
			"path": "source/dev/source"
		}
	],

	"build_systems":
    [
    	{
    		"name": "editor build",
    		"shell_cmd": "cd ${project_path}/build && make editor -j4",
    		"working_dir": "/",
    		"file_regex": "^(/.+):(\\d+):(\\d+): ",
            "target": "ansi_color_build",
            "syntax": "Packages/ANSIescape/ANSI.sublime-syntax",
    		"variants": [
    			{
    				"name": "run",
    				"shell_cmd": "cd ${project_path}/build && ../bin/editor",
    				// Enables navigation to XML files from log
    				"file_regex": "\"(/.+\\.xml)\""
    			},
    			{
    				"name": "build & run",
    				"shell_cmd": "cd ${project_path}/build && make editor -j4 && ../bin/editor"
    			},
    			{
    				"name": "rebuild & run - external [DEBUG]",
    				"shell_cmd": "cd ${project_path}/build && gnome-terminal -- /bin/zsh -c 'cmake -DCMAKE_BUILD_TYPE=Debug -DSIMPLE_ANSI=OFF .. && make editor -j4 && ../bin/editor && exec zsh'"
    			},
    			{
    				"name": "rebuild [DEBUG]",
    				"shell_cmd": "cd ${project_path}/build && cmake -DCMAKE_BUILD_TYPE=Debug -DSIMPLE_ANSI=ON .. && make editor -j4"
    			},
    			{
    				"name": "rebuild [RELEASE]",
    				"shell_cmd": "cd ${project_path}/build && cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_LOGGING=ON -DSIMPLE_ANSI=OFF .. && make editor -j4"
    			},
    			{
    				"name": "rebuild [RELEASE W/ DEBUG INFO]",
    				"shell_cmd": "cd ${project_path}/build && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_LOGGING=ON -DSIMPLE_ANSI=OFF .. && make editor -j4"
    			},
    			{
    				"name": "clean",
    				"shell_cmd": "cd ${project_path}/build && make clean"
    			},
    			{
    				"name": "Engine - cppclean",
    				"shell_cmd": "cd ${project_path}/scripts && ./cppclean.sh",
    				"working_dir": "${project_path}/source/Erwin",
    				"file_regex": "^\\./(.+):(\\d+): "
    			}
    		]
    	}
    ],

    "settings":
    {
        // NOTE(ndx): finding information on EasyClangComplete configuration was tedious to say the least.
        // https://pbs.twimg.com/media/EVBj7AQXgAAMk0i?format=jpg&name=small
        // I used this page as a source:
        // https://niosus.github.io/EasyClangComplete/settings
        // Takeaways:
        // - All ECC settings should be put in the "settings" field of this config file
        // - All listed flags should be prefixed by "ecc_"
        // - Use ${project_path} to refer to the project top folder, nothing else
        // - If ECC complains about a non existing header, two options:
        //    -> force-feed it the path with the help of a -I command as done below
        //       Hint: match the target_include_directories() directives in the relevant CMakeLists.txt
        //    -> setup an ecc_flags_sources array and point ECC to a compilation database file
        //       like compile_commands.json
        //       This should be the preferred way of doing it if ECC is to be used in a project whose
        //       dependencies are handled by Conan. 
        // - If ECC complains about the syntax and does not find certain std symbols, set the ecc_lang_flags field
        "ecc_common_flags" : [
            "-I/usr/include",
            // this is needed to include the correct headers for clang
            "-I/usr/lib/clang/$clang_version/include",
        ],
        "ecc_lang_flags": {
            "CPP": ["-std=c++17"],
        },
        "ecc_flags_sources":
        [
            {
                "file": "compile_commands.json",
                "search_in": "${project_path}/build"
            }
        ],
        // For clang-tidy linter to work, we must provide a path to the compile_commands.json
        // file generated by cmake
        "SublimeLinter.linters.clangtidy.compile_commands": "${project_path}/build",
        // ClangFormat plugin settings
        "ClangFormat": {
            "format_on_save": false
        }
    }
}
