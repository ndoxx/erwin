#!/usr/bin/python3

# This script allows to generate a action.h header file starting from a default_keybindings.xml file

import xml.dom.minidom

def main():
	default_kbd_path = '../config/default_keybindings.xml'
	header_path = '../source/Erwin/input/action.h'

	doc = xml.dom.minidom.parse(default_kbd_path);

	print ("Reading: ", doc.nodeName)
	print ("Root: ", doc.firstChild.tagName)

	actions = doc.getElementsByTagName("action")
	for action in actions:
		print (action.getAttribute("name"))

	print("Generating header.")
	hf = open(header_path,'w')

	hf.write('#pragma once\n')
	hf.write('#include "core/core.h"\n')
	hf.write('namespace erwin\n')
	hf.write('{\n')
	hf.write('\n')
	hf.write('// ### This file was generated by scripts/gen_actions.py ###\n')
	hf.write('\n')
	hf.write('static const std::string s_default_keybindings_path = "config/default_keybindings.xml";\n')
	hf.write('\n')
	hf.write('// A client-side action enum should initialize its first value with Action::ACTION_COUNT\n')
	hf.write('enum Action: uint32_t\n')
	hf.write('{\n')
	hf.write('\tACTION_NONE = 0,\n')

	for action in actions:
		hf.write('\t' + action.getAttribute("name") + ',\n')

	hf.write('\tACTION_COUNT,\n')
	hf.write('};\n')
	hf.write('\n')
	hf.write('[[maybe_unused]] static Action name_to_action(hash_t name)\n')
	hf.write('{\n')
	hf.write('\tswitch(name)\n')
	hf.write('\t{\n')
	hf.write('\t\tdefault: return ACTION_NONE;\n')

	for action in actions:
		hf.write('\t\tcase "' + action.getAttribute("name") + '"_h: return ' + action.getAttribute("name") + ';\n')

	hf.write('\t}\n')
	hf.write('\treturn ACTION_NONE;\n')
	hf.write('}\n')
	hf.write('} // namespace erwin\n')

if __name__ == "__main__":
	main();